---
description: 
globs: 
alwaysApply: false
---
# GitHub PR 및 이슈 관리 룰

## Pull Request (PR) 관리 원칙

### PR 생성 규칙
1. **브랜치 네이밍 컨벤션**
   - `feature/기능명` - 새로운 기능 개발
   - `bugfix/버그명` - 버그 수정
   - `hotfix/긴급수정명` - 긴급 수정
   - `refactor/리팩토링명` - 코드 리팩토링
   - `docs/문서명` - 문서 수정

2. **PR 제목 규칙**
   - `[타입] 간단한 설명`
   - 예: `[FEAT] 사용자 인증 기능 추가`
   - 예: `[FIX] 로그인 버그 수정`
   - 예: `[DOCS] README 업데이트`

3. **PR 설명 템플릿**
   ```markdown
   ## 변경 사항
   - 주요 변경 내용 설명

   ## 테스트
   - [ ] 단위 테스트 작성
   - [ ] 통합 테스트 통과
   - [ ] 수동 테스트 완료

   ## 체크리스트
   - [ ] 코드 리뷰 요청
   - [ ] 테스트 코드 작성
   - [ ] 문서 업데이트
   ```

### PR 검토 및 머지 규칙
1. **최소 1명의 리뷰어 승인 필요**
2. **모든 테스트 통과 후 머지 가능**
3. **Squash merge 사용 권장**
4. **머지 후 브랜치 삭제**

## 이슈 관리 원칙

### 이슈 생성 규칙
1. **이슈 타입별 라벨**
   - `bug` - 버그 신고
   - `enhancement` - 기능 개선
   - `feature` - 새로운 기능
   - `documentation` - 문서 관련
   - `question` - 질문
   - `help wanted` - 도움 필요

2. **우선순위 라벨**
   - `priority: critical` - 긴급
   - `priority: high` - 높음
   - `priority: medium` - 보통
   - `priority: low` - 낮음

3. **이슈 템플릿**
   ```markdown
   ## 문제 설명
   명확하고 간결한 문제 설명

   ## 재현 방법
   1. 단계별 재현 방법
   2. 예상 결과
   3. 실제 결과

   ## 환경 정보
   - OS: 
   - Python 버전:
   - 브라우저 (해당시):

   ## 추가 정보
   스크린샷, 로그 등
   ```

### 이슈 처리 프로세스
1. **이슈 생성 시 자동 라벨 할당**
2. **담당자 자동 할당**
3. **우선순위에 따른 처리 순서**
4. **완료 후 이슈 자동 종료**

## 자동화 규칙

### 자동 라벨링
- PR/이슈 내용 분석하여 적절한 라벨 자동 할당
- 파일 변경 패턴에 따른 카테고리 라벨 추가

### 자동 할당
- 파일 변경 영역에 따른 담당자 자동 할당
- 로드 밸런싱을 통한 공평한 리뷰 분배

### 자동 댓글
- PR 생성 시 체크리스트 댓글 자동 추가
- 테스트 결과 댓글 자동 추가
- 이슈 생성 시 안내 댓글 자동 추가

## 코드 리뷰 가이드라인

### 리뷰어 책임
1. **코드 품질 검토**
   - SOLID 원칙 준수 확인
   - Clean Architecture 패턴 확인
   - 코드 스타일 일관성 확인

2. **테스트 코드 검토**
   - 테스트 커버리지 확인
   - 테스트 케이스 적절성 검토
   - TDD 프로세스 준수 확인

3. **보안 및 성능 검토**
   - 보안 취약점 확인
   - 성능 최적화 가능성 검토
   - 메모리 누수 등 점검

### 리뷰 응답 시간
- **긴급 (Critical)**: 2시간 이내
- **높음 (High)**: 1일 이내
- **보통 (Medium)**: 2일 이내
- **낮음 (Low)**: 1주일 이내
