---
description: 
globs: 
alwaysApply: false
---
# 멀티턴 대화 메모리 개발 계획

## 구현 항목

### 1. 멀티턴 대화 지원
- LangGraph InMemorySaver를 사용한 대화 상태 저장
- thread_id 기반 세션 관리  
- 대화 히스토리 유지 및 컨텍스트 인식
- 사용자별 독립적인 대화 세션 관리

### 2. 메모리 관리 시스템
- 단기 메모리: 현재 대화 세션 내 메시지 히스토리
- 장기 메모리: 사용자 정보 및 선호도 저장
- 메시지 트리밍: 토큰 제한 관리 및 성능 최적화
- 대화 요약: 긴 대화 히스토리 자동 요약

### 3. 세션 상태 관리
- 대화 상태 체크포인트 저장/복원
- 세션 만료 및 정리 로직
- 동시 다중 세션 지원
- 대화 중단 및 재개 기능

### 4. 컨텍스트 인식 응답
- 이전 메시지 참조 가능한 응답 생성
- 사용자 정보 기반 개인화 응답
- 대화 흐름 이해 및 연속성 유지
- 주제 변경 감지 및 적응

## 기술 스택 및 라이브러리

### 핵심 프레임워크
- **LangGraph**: 상태 기반 대화 그래프 관리
- **LangChain**: LLM 체인 및 도구 통합
- **InMemorySaver**: 대화 상태 체크포인트 저장

### 메모리 관리
- **langgraph.checkpoint.memory.InMemorySaver**: 대화 세션 저장
- **langgraph.store.memory.InMemoryStore**: 장기 메모리 저장
- **langchain_core.messages.utils.trim_messages**: 메시지 트리밍
- **langchain_core.messages.utils.count_tokens_approximately**: 토큰 카운팅

### 상태 관리
- **langgraph.graph.MessagesState**: 기본 메시지 상태
- **langgraph.graph.StateGraph**: 상태 그래프 정의
- **langgraph.types.Command**: 상태 업데이트 명령

### API 및 통합
- **FastAPI**: 백엔드 API 서버
- **Streamlit**: 프론트엔드 인터페이스
- **Google Generative AI**: LLM 모델

## 개발 계획

### Phase 1: 기본 멀티턴 구조 구축
1. InMemorySaver 체크포인터 설정
2. MessagesState 기반 상태 정의
3. thread_id 기반 세션 관리 구현
4. 기본 대화 연속성 테스트

### Phase 2: 메모리 관리 시스템
5. 메시지 히스토리 저장/조회 기능
6. 토큰 제한 관리 및 메시지 트리밍
7. 대화 컨텍스트 유지 로직
8. 세션별 독립적 메모리 관리

### Phase 3: 고급 기능 구현
9. 장기 메모리 저장소 통합
10. 대화 요약 자동화
11. 사용자 정보 기반 개인화
12. 멀티 세션 동시 처리

### Phase 4: 성능 최적화
13. 메모리 사용량 최적화
14. 응답 속도 개선
15. 세션 정리 자동화
16. 에러 처리 및 복구

### Phase 5: API 통합 및 테스트
17. FastAPI 엔드포인트 수정
18. Streamlit UI 멀티턴 지원
19. 통합 테스트 구현
20. 성능 및 메모리 리크 테스트

## 파일 수정 대상

### 핵심 파일
- [agent.py](mdc:agent/agent.py): ShoppingAgent 클래스 멀티턴 지원 수정
- [tools.py](mdc:agent/tools.py): 도구 함수들의 메모리 인식 기능 추가
- [main.py](mdc:backend/main.py): FastAPI 세션 관리 엔드포인트 수정
- [app.py](mdc:frontend/app.py): Streamlit 멀티턴 UI 구현

### 설정 및 테스트
- [config.py](mdc:config.py): 메모리 관련 설정 추가
- [test_agent.py](mdc:tests/test_agent.py): 멀티턴 기능 테스트 추가

## 개발 원칙

### TDD 적용
- 각 단계별 테스트 코드 우선 작성
- 멀티턴 시나리오 테스트 케이스 정의
- 메모리 누수 및 성능 테스트 포함

### Clean Architecture
- 메모리 관리 레이어 분리
- 비즈니스 로직과 저장소 분리
- 인터페이스 기반 확장 가능한 구조

### SOLID 원칙
- 단일 책임: 메모리 관리, 세션 관리 분리
- 개방-폐쇄: 새로운 메모리 저장소 쉽게 추가
- 의존성 역전: 추상화된 메모리 인터페이스 사용
