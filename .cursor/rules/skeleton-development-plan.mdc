---
description: 
globs: 
alwaysApply: false
---
# 스켈레톤 코드 개발 계획

## 개발 환경
- Python 3.11 기반 개발 환경
- FastAPI 백엔드 서버
- Streamlit 프론트엔드
- LangGraph Agent (Gemini LLM)
- MCP 툴 연동 (더미 데이터 기반)

## 개발 순서

### 1. 프로젝트 구조 설정
- requirements.txt 작성 (FastAPI, Streamlit, LangGraph, Google-GenerativeAI 등)
- 폴더 구조 생성 (backend/, frontend/, agent/, tests/)
- 기본 설정 파일 작성 (.env.example, config.py)
- 가상환경 설정 및 의존성 설치

### 2. 백엔드 API 서버 구현
- FastAPI 앱 초기화 및 기본 설정
- /health 엔드포인트 구현 (서버 상태 확인)
- /chat 엔드포인트 구현 (POST 방식, SSE 스트리밍 지원)
- 요청/응답 모델 정의 (Pydantic 모델)
- CORS 설정 및 미들웨어 구성

### 3. LangGraph Agent 기본 구조
- Gemini LLM 연동 설정
- React Agent 기본 구성
- 로컬 메모리 모듈 설정 (InMemorySaver)
- 더미 상품 검색 툴 구현
- Agent 상태 관리 및 세션 처리

### 4. MCP 툴 더미 구현
- 더미 네이버 쇼핑 검색 결과 생성기
- 더미 Exa 검색 결과 생성기
- 상품 정보 파싱 로직 (더미 데이터)
- 가격 비교 및 정렬 기능

### 5. 프론트엔드 채팅 UI
- Streamlit 기본 앱 구조 설정
- 채팅 인터페이스 구현 (st.chat_message, st.chat_input)
- 세션 상태 관리 (대화 히스토리)
- 상품 결과 표시 컴포넌트
- 로딩 상태 및 에러 처리

### 6. SSE 스트리밍 통합
- 백엔드 SSE 이벤트 스트림 구현
- 프론트엔드 SSE 클라이언트 연동
- 실시간 응답 처리 및 표시
- 검색 상태 업데이트 (진행 중, 완료)
- 스트리밍 에러 핸들링

### 7. 시스템 통합 및 테스트
- 전체 플로우 테스트 (사용자 입력 → Agent → 응답)
- 더미 데이터 시나리오 테스트
- 성능 및 안정성 검증
- 에러 케이스 처리 확인
- 로그 시스템 구현

## 더미 데이터 설계

### 상품 정보 구조
- 상품명, 가격, 할인 정보
- 배송 정보, 판매자 정보
- 상품 링크 (가상 URL)
- 평점 및 리뷰 수

### 검색 시나리오
- 일반 상품 검색 (예: "무선 이어폰")
- 카테고리별 검색 (예: "전자제품")
- 가격대별 검색 (예: "10만원 이하 노트북")
- 브랜드별 검색 (예: "삼성 스마트폰")

### Agent 응답 패턴
- 검색 진행 상황 안내
- 상품 비교 및 추천
- 가격 정보 제공
- 구매 가이드 제공

## 테스트 전략

### 단위 테스트
- API 엔드포인트 응답 검증
- Agent 툴 동작 확인
- 더미 데이터 생성 로직 테스트

### 통합 테스트
- 전체 채팅 플로우 검증
- SSE 스트리밍 동작 확인
- 멀티턴 대화 테스트

### UI 테스트
- 사용자 인터랙션 검증
- 응답 표시 형식 확인
- 에러 상황 UI 처리

## 확장 계획
- 실제 MCP 툴 연동 준비
- 데이터베이스 연동 구조
- 사용자 인증 시스템
- 캐싱 및 최적화
