---
description: 
globs: 
alwaysApply: false
---
# 랭체인 웹 검색 툴 MCP 방식 수정 개발 계획

## 구현 항목

### 1. MCP 클라이언트 설정
- MultiServerMCPClient 구성
- Naver Search MCP 연결
- Exa Search MCP 연결
- .env 파일에 MCP URL 설정

### 2. 기존 웹 검색 툴 MCP 방식 변경
- 기존 랭체인 웹 검색 툴 분석 및 백업
- MCP 클라이언트를 통한 검색 툴 로드
- 검색 결과 포맷 통일화

### 3. 통합 검색 인터페이스 구현
- 여러 MCP 검색 툴 통합 관리
- 검색 결과 병합 및 중복 제거
- 검색 우선순위 설정

### 4. 에이전트 통합
- LangGraph 에이전트에 MCP 툴 연결
- 기존 에이전트 파이프라인 호환성 유지
- 검색 툴 선택 로직 구현

## 기술 스택 및 라이브러리

### 핵심 라이브러리
- `langchain-mcp-adapters`: MCP와 LangChain 연결
- `langchain`: 기본 프레임워크
- `langgraph`: 에이전트 구성
- `mcp`: MCP 클라이언트 기능

### MCP 서버
- Naver Search MCP: 네이버 검색 서비스
- Exa Search MCP: Exa 검색 서비스

### 설정 관리
- `python-dotenv`: 환경변수 관리
- `.env` 파일: MCP URL 저장

## 개발 계획

1. MCP 클라이언트 설정 구현
2. .env 파일 MCP URL 설정
3. 기존 웹 검색 툴 백업
4. Naver Search MCP 연결
5. Exa Search MCP 연결
6. MCP 툴 로더 구현
7. 통합 검색 인터페이스 개발
8. 검색 결과 포맷 통일화
9. LangGraph 에이전트 MCP 툴 연결
10. 기존 시스템 호환성 테스트
11. 검색 성능 최적화
12. 에러 핸들링 및 폴백 시스템

## MCP 설정 예시

### .env 파일
```bash
# MCP Server URLs
NAVER_SEARCH_MCP_URL=http://localhost:8001/mcp
EXA_SEARCH_MCP_URL=http://localhost:8002/mcp
```

### MCP 클라이언트 구성
```python
client = MultiServerMCPClient(
    {
        "naver_search_mcp": {
            "url": "http://localhost:8001/mcp",
            "transport": "streamable_http",
        },
        "exa_search_mcp": {
            "url": "http://localhost:8002/mcp", 
            "transport": "streamable_http",
        }
    }
)
tools = await client.get_tools()
```

## 주요 파일 구조

- [agent/agent.py](mdc:agent/agent.py): 에이전트 메인 로직
- [agent/tools.py](mdc:agent/tools.py): 툴 관리 로직
- [backend/routes.py](mdc:backend/routes.py): API 라우팅
- [config.py](mdc:config.py): 설정 관리
- [requirements.txt](mdc:requirements.txt): 의존성 관리

## 개발 원칙

- 기존 코드 최대한 보존
- TDD 방식 개발 (테스트 먼저 작성)
- SOLID 원칙 준수
- Clean Architecture 적용
- 작은 단위 파일/함수 구성
