name: PR 자동 할당

on:
  pull_request:
    types: [opened, reopened]

jobs:
  auto-assign:
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: 변경된 파일 분석
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files_yaml: |
          backend:
            - 'backend/**'
            - '**/*api*'
          frontend:
            - 'frontend/**'
            - '**/*ui*'
            - '**/*component*'
          agent:
            - 'agent/**'
            - '**/*agent*'
          tests:
            - 'tests/**'
            - '**/*test*'
          docs:
            - 'docs/**'
            - '**/*.md'
            - '**/*.rst'
          config:
            - 'config.py'
            - '**/*config*'
            - '**/*.yml'
            - '**/*.yaml'

    - name: 팀원 리스트 및 할당 로직
      id: assign-logic
      uses: actions/github-script@v7
      with:
        script: |
          // 팀원 정보 (실제 GitHub 사용자명으로 변경 필요)
          const teamMembers = {
            backend: ['backend-dev1', 'backend-dev2'],
            frontend: ['frontend-dev1', 'frontend-dev2'], 
            agent: ['ai-dev1', 'ai-dev2'],
            devops: ['devops-dev1'],
            lead: ['team-lead']
          };

          // 모든 팀원을 하나의 배열로 합치기
          const allMembers = [
            ...teamMembers.backend,
            ...teamMembers.frontend,
            ...teamMembers.agent,
            ...teamMembers.devops,
            ...teamMembers.lead
          ];

          // 변경된 파일 영역별 담당자 결정
          let assignees = new Set();
          
          // 변경된 파일 영역에 따른 담당자 할당
          if ('${{ steps.changed-files.outputs.backend_any_changed }}' === 'true') {
            const randomBackend = teamMembers.backend[Math.floor(Math.random() * teamMembers.backend.length)];
            assignees.add(randomBackend);
          }
          
          if ('${{ steps.changed-files.outputs.frontend_any_changed }}' === 'true') {
            const randomFrontend = teamMembers.frontend[Math.floor(Math.random() * teamMembers.frontend.length)];
            assignees.add(randomFrontend);
          }
          
          if ('${{ steps.changed-files.outputs.agent_any_changed }}' === 'true') {
            const randomAgent = teamMembers.agent[Math.floor(Math.random() * teamMembers.agent.length)];
            assignees.add(randomAgent);
          }

          // 설정 파일 변경 시 DevOps 팀 할당
          if ('${{ steps.changed-files.outputs.config_any_changed }}' === 'true') {
            assignees.add(teamMembers.devops[0]);
          }

          // 문서 변경 시 팀 리드 할당
          if ('${{ steps.changed-files.outputs.docs_any_changed }}' === 'true') {
            assignees.add(teamMembers.lead[0]);
          }

          // 담당자가 없으면 랜덤하게 할당
          if (assignees.size === 0) {
            const randomMember = allMembers[Math.floor(Math.random() * allMembers.length)];
            assignees.add(randomMember);
          }

          // PR 작성자는 제외
          const prAuthor = '${{ github.event.pull_request.user.login }}';
          assignees.delete(prAuthor);

          // 최소 1명은 할당되도록 보장
          if (assignees.size === 0) {
            const randomMember = allMembers.filter(member => member !== prAuthor)[0];
            if (randomMember) assignees.add(randomMember);
          }

          return Array.from(assignees);

    - name: PR에 담당자 할당
      uses: actions/github-script@v7
      with:
        script: |
          const assignees = ${{ steps.assign-logic.outputs.result }};
          
          if (assignees && assignees.length > 0) {
            try {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                assignees: assignees
              });
              
              console.log(`할당된 담당자: ${assignees.join(', ')}`);
              
              // 할당 완료 댓글 추가
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🎯 **자동 담당자 할당 완료**\n\n다음 분들이 이 PR의 담당자로 할당되었습니다:\n${assignees.map(assignee => `- @${assignee}`).join('\n')}\n\n변경된 파일 영역을 기반으로 자동 할당되었습니다. 필요시 담당자를 변경해주세요!\n\n---\n🤖 자동 할당 시스템`
              });
            } catch (error) {
              console.log(`담당자 할당 실패: ${error.message}`);
              console.log('사용 가능한 협력자가 아닐 수 있습니다.');
            }
          }

    - name: 리뷰어 요청
      uses: actions/github-script@v7
      with:
        script: |
          const assignees = ${{ steps.assign-logic.outputs.result }};
          
          if (assignees && assignees.length > 0) {
            try {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: assignees
              });
              
              console.log(`리뷰어 요청 완료: ${assignees.join(', ')}`);
            } catch (error) {
              console.log(`리뷰어 요청 실패: ${error.message}`);
            }
          } 